// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/trustbloc/sidetree-core-go/pkg/api/operation"
)

type OperationQueue struct {
	AddStub        func(*operation.QueuedOperation, uint64) (uint, error)
	addMutex       sync.RWMutex
	addArgsForCall []struct {
		arg1 *operation.QueuedOperation
		arg2 uint64
	}
	addReturns struct {
		result1 uint
		result2 error
	}
	addReturnsOnCall map[int]struct {
		result1 uint
		result2 error
	}
	LenStub        func() uint
	lenMutex       sync.RWMutex
	lenArgsForCall []struct {
	}
	lenReturns struct {
		result1 uint
	}
	lenReturnsOnCall map[int]struct {
		result1 uint
	}
	PeekStub        func(uint) (operation.QueuedOperationsAtTime, error)
	peekMutex       sync.RWMutex
	peekArgsForCall []struct {
		arg1 uint
	}
	peekReturns struct {
		result1 operation.QueuedOperationsAtTime
		result2 error
	}
	peekReturnsOnCall map[int]struct {
		result1 operation.QueuedOperationsAtTime
		result2 error
	}
	RemoveStub        func(uint) (operation.QueuedOperationsAtTime, func() uint, func(error), error)
	removeMutex       sync.RWMutex
	removeArgsForCall []struct {
		arg1 uint
	}
	removeReturns struct {
		result1 operation.QueuedOperationsAtTime
		result2 func() uint
		result3 func(error)
		result4 error
	}
	removeReturnsOnCall map[int]struct {
		result1 operation.QueuedOperationsAtTime
		result2 func() uint
		result3 func(error)
		result4 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *OperationQueue) Add(arg1 *operation.QueuedOperation, arg2 uint64) (uint, error) {
	fake.addMutex.Lock()
	ret, specificReturn := fake.addReturnsOnCall[len(fake.addArgsForCall)]
	fake.addArgsForCall = append(fake.addArgsForCall, struct {
		arg1 *operation.QueuedOperation
		arg2 uint64
	}{arg1, arg2})
	stub := fake.AddStub
	fakeReturns := fake.addReturns
	fake.recordInvocation("Add", []interface{}{arg1, arg2})
	fake.addMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *OperationQueue) AddCallCount() int {
	fake.addMutex.RLock()
	defer fake.addMutex.RUnlock()
	return len(fake.addArgsForCall)
}

func (fake *OperationQueue) AddCalls(stub func(*operation.QueuedOperation, uint64) (uint, error)) {
	fake.addMutex.Lock()
	defer fake.addMutex.Unlock()
	fake.AddStub = stub
}

func (fake *OperationQueue) AddArgsForCall(i int) (*operation.QueuedOperation, uint64) {
	fake.addMutex.RLock()
	defer fake.addMutex.RUnlock()
	argsForCall := fake.addArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *OperationQueue) AddReturns(result1 uint, result2 error) {
	fake.addMutex.Lock()
	defer fake.addMutex.Unlock()
	fake.AddStub = nil
	fake.addReturns = struct {
		result1 uint
		result2 error
	}{result1, result2}
}

func (fake *OperationQueue) AddReturnsOnCall(i int, result1 uint, result2 error) {
	fake.addMutex.Lock()
	defer fake.addMutex.Unlock()
	fake.AddStub = nil
	if fake.addReturnsOnCall == nil {
		fake.addReturnsOnCall = make(map[int]struct {
			result1 uint
			result2 error
		})
	}
	fake.addReturnsOnCall[i] = struct {
		result1 uint
		result2 error
	}{result1, result2}
}

func (fake *OperationQueue) Len() uint {
	fake.lenMutex.Lock()
	ret, specificReturn := fake.lenReturnsOnCall[len(fake.lenArgsForCall)]
	fake.lenArgsForCall = append(fake.lenArgsForCall, struct {
	}{})
	stub := fake.LenStub
	fakeReturns := fake.lenReturns
	fake.recordInvocation("Len", []interface{}{})
	fake.lenMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *OperationQueue) LenCallCount() int {
	fake.lenMutex.RLock()
	defer fake.lenMutex.RUnlock()
	return len(fake.lenArgsForCall)
}

func (fake *OperationQueue) LenCalls(stub func() uint) {
	fake.lenMutex.Lock()
	defer fake.lenMutex.Unlock()
	fake.LenStub = stub
}

func (fake *OperationQueue) LenReturns(result1 uint) {
	fake.lenMutex.Lock()
	defer fake.lenMutex.Unlock()
	fake.LenStub = nil
	fake.lenReturns = struct {
		result1 uint
	}{result1}
}

func (fake *OperationQueue) LenReturnsOnCall(i int, result1 uint) {
	fake.lenMutex.Lock()
	defer fake.lenMutex.Unlock()
	fake.LenStub = nil
	if fake.lenReturnsOnCall == nil {
		fake.lenReturnsOnCall = make(map[int]struct {
			result1 uint
		})
	}
	fake.lenReturnsOnCall[i] = struct {
		result1 uint
	}{result1}
}

func (fake *OperationQueue) Peek(arg1 uint) (operation.QueuedOperationsAtTime, error) {
	fake.peekMutex.Lock()
	ret, specificReturn := fake.peekReturnsOnCall[len(fake.peekArgsForCall)]
	fake.peekArgsForCall = append(fake.peekArgsForCall, struct {
		arg1 uint
	}{arg1})
	stub := fake.PeekStub
	fakeReturns := fake.peekReturns
	fake.recordInvocation("Peek", []interface{}{arg1})
	fake.peekMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *OperationQueue) PeekCallCount() int {
	fake.peekMutex.RLock()
	defer fake.peekMutex.RUnlock()
	return len(fake.peekArgsForCall)
}

func (fake *OperationQueue) PeekCalls(stub func(uint) (operation.QueuedOperationsAtTime, error)) {
	fake.peekMutex.Lock()
	defer fake.peekMutex.Unlock()
	fake.PeekStub = stub
}

func (fake *OperationQueue) PeekArgsForCall(i int) uint {
	fake.peekMutex.RLock()
	defer fake.peekMutex.RUnlock()
	argsForCall := fake.peekArgsForCall[i]
	return argsForCall.arg1
}

func (fake *OperationQueue) PeekReturns(result1 operation.QueuedOperationsAtTime, result2 error) {
	fake.peekMutex.Lock()
	defer fake.peekMutex.Unlock()
	fake.PeekStub = nil
	fake.peekReturns = struct {
		result1 operation.QueuedOperationsAtTime
		result2 error
	}{result1, result2}
}

func (fake *OperationQueue) PeekReturnsOnCall(i int, result1 operation.QueuedOperationsAtTime, result2 error) {
	fake.peekMutex.Lock()
	defer fake.peekMutex.Unlock()
	fake.PeekStub = nil
	if fake.peekReturnsOnCall == nil {
		fake.peekReturnsOnCall = make(map[int]struct {
			result1 operation.QueuedOperationsAtTime
			result2 error
		})
	}
	fake.peekReturnsOnCall[i] = struct {
		result1 operation.QueuedOperationsAtTime
		result2 error
	}{result1, result2}
}

func (fake *OperationQueue) Remove(arg1 uint) (operation.QueuedOperationsAtTime, func() uint, func(error), error) {
	fake.removeMutex.Lock()
	ret, specificReturn := fake.removeReturnsOnCall[len(fake.removeArgsForCall)]
	fake.removeArgsForCall = append(fake.removeArgsForCall, struct {
		arg1 uint
	}{arg1})
	stub := fake.RemoveStub
	fakeReturns := fake.removeReturns
	fake.recordInvocation("Remove", []interface{}{arg1})
	fake.removeMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3, ret.result4
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3, fakeReturns.result4
}

func (fake *OperationQueue) RemoveCallCount() int {
	fake.removeMutex.RLock()
	defer fake.removeMutex.RUnlock()
	return len(fake.removeArgsForCall)
}

func (fake *OperationQueue) RemoveCalls(stub func(uint) (operation.QueuedOperationsAtTime, func() uint, func(error), error)) {
	fake.removeMutex.Lock()
	defer fake.removeMutex.Unlock()
	fake.RemoveStub = stub
}

func (fake *OperationQueue) RemoveArgsForCall(i int) uint {
	fake.removeMutex.RLock()
	defer fake.removeMutex.RUnlock()
	argsForCall := fake.removeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *OperationQueue) RemoveReturns(result1 operation.QueuedOperationsAtTime, result2 func() uint, result3 func(error), result4 error) {
	fake.removeMutex.Lock()
	defer fake.removeMutex.Unlock()
	fake.RemoveStub = nil
	fake.removeReturns = struct {
		result1 operation.QueuedOperationsAtTime
		result2 func() uint
		result3 func(error)
		result4 error
	}{result1, result2, result3, result4}
}

func (fake *OperationQueue) RemoveReturnsOnCall(i int, result1 operation.QueuedOperationsAtTime, result2 func() uint, result3 func(error), result4 error) {
	fake.removeMutex.Lock()
	defer fake.removeMutex.Unlock()
	fake.RemoveStub = nil
	if fake.removeReturnsOnCall == nil {
		fake.removeReturnsOnCall = make(map[int]struct {
			result1 operation.QueuedOperationsAtTime
			result2 func() uint
			result3 func(error)
			result4 error
		})
	}
	fake.removeReturnsOnCall[i] = struct {
		result1 operation.QueuedOperationsAtTime
		result2 func() uint
		result3 func(error)
		result4 error
	}{result1, result2, result3, result4}
}

func (fake *OperationQueue) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addMutex.RLock()
	defer fake.addMutex.RUnlock()
	fake.lenMutex.RLock()
	defer fake.lenMutex.RUnlock()
	fake.peekMutex.RLock()
	defer fake.peekMutex.RUnlock()
	fake.removeMutex.RLock()
	defer fake.removeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *OperationQueue) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
